import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from datetime import datetime, timedelta
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CHANNEL_ID = "XCrypto_Pulse"
CHAT_ID = "-f0oeYDCyTAMwM2Ni"
ADMIN_ID = 962267965

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
users_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
def initialize_user(user_id, first_name):
    if user_id not in users_data:
        users_data[user_id] = {
            "points": 0,
            "last_claim": None,
            "streak": 0,
            "name": first_name,
            "subscribed": False  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def greet_new_user(update: Update, context):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name

    initialize_user(user_id, first_name)
    await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª! üéâ –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! üöÄ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id in users_data:
            users_data[referrer_id]["points"] += 100
            await context.bot.send_message(chat_id=referrer_id, text="üéâ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –ø–æ–∏–Ω—Ç–æ–≤! üéâ")

    initialize_user(user_id, first_name)

    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–∏–Ω—Ç—ã", callback_data='points')],
        [InlineKeyboardButton("üèÜ –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤", callback_data='leaders')],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='invite')],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data='daily_reward')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! ü•≥\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? üëá", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏–Ω—Ç–æ–≤ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
async def my_points(update: Update, context):
    user = update.effective_user
    user_id = user.id

    initialize_user(user_id, user.first_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = users_data[user_id]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è
    if user_info["last_claim"] == today:
        await update.callback_query.message.reply_text("üéÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π. üòâ")
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É, –Ω–∞—á–∏—Å–ª—è–µ–º –µ—ë
        user_info["streak"] = min(user_info["streak"] + 1, 7)
        reward = [50, 70, 100, 120, 150, 180, 200][user_info["streak"] - 1]
        user_info["points"] += reward
        user_info["last_claim"] = today

        await update.callback_query.message.reply_text(f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª {reward} –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∏–∑–∏—Ç! –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å {user_info['points']} –ø–æ–∏–Ω—Ç–æ–≤! üöÄ")

# Callback handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context):
    query = update.callback_query
    data = query.data

    if data == 'points':
        await my_points(update, context)
    elif data == 'leaders':
        await leaderboard(update, context)
    elif data == 'invite':
        await invite(update, context)
    elif data == 'daily_reward':
        await my_points(update, context)  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
    elif data == 'subscribe':
        await subscribe(update, context)  # –î–æ–±–∞–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª

# –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤
async def leaderboard(update: Update, context):
    user = update.effective_user
    initialize_user(user.id, user.first_name)

    sorted_users = sorted(users_data.items(), key=lambda x: x[1]['points'], reverse=True)
    
    leaderboard_text = "üèÜ –¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤:\n"
    user_info = users_data[user.id]
    user_position = None

    for i, (user_id, user_data) in enumerate(sorted_users):
        if i < 10:
            leaderboard_text += f"{i + 1}. {user_data['name']}: {user_data['points']} –ø–æ–∏–Ω—Ç–æ–≤\n"
        elif user_id == user.id:
            user_position = f"{i + 1}. {user_data['name']}: {user_data['points']} –ø–æ–∏–Ω—Ç–æ–≤"

    if user_position:
        leaderboard_text += f"\nüë§ –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {user_position}"

    await update.callback_query.message.reply_text(leaderboard_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
async def invite(update: Update, context):
    user = update.effective_user
    user_id = user.id

    initialize_user(user_id, user.first_name)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_link = f"https://t.me/{CHANNEL_ID}?start={user_id}"
    await update.callback_query.message.reply_text(f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ 100 –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ! –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link} üì≤")

# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
async def subscribe(update: Update, context):
    user = update.effective_user
    user_id = user.id

    initialize_user(user_id, user.first_name)

    user_info = users_data[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_info.get("subscribed", False):
        await update.callback_query.message.reply_text("üëç –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ 100 –ø–æ–∏–Ω—Ç–æ–≤.")
    else:
        user_info["points"] += 100
        user_info["subscribed"] = True  # –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
        await update.callback_query.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ –¢—ã –ø–æ–ª—É—á–∏–ª 100 –ø–æ–∏–Ω—Ç–æ–≤! –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å {user_info['points']} –ø–æ–∏–Ω—Ç–æ–≤.")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID
async def admin(update: Update, context):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    user_list = "\n".join([f"{user_data['name']} (ID: {user_id}): {user_data['points']} –ø–æ–∏–Ω—Ç–æ–≤"
                           for user_id, user_data in users_data.items()])
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–æ–∏–Ω—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def reset(update: Update, context):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ—á–∫–∏ –∏ —Å—Ç—Ä–∏–∫–∏
    for user_id in users_data:
        users_data[user_id]['points'] = 0
        users_data[user_id]['streak'] = 0
        users_data[user_id]['last_claim'] = None

    await update.message.reply_text("üîÑ –í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞
    for user_id in users_data:
        try:
            await context.bot.send_message(chat_id=user_id, text="üéâ –°–µ–∑–æ–Ω –æ–∫–æ–Ω—á–µ–Ω! –ó–∞–±–∏—Ä–∞–π —Å–≤–æ–∏ –ø—Ä–∏–∑—ã –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–æ–≤–æ–º—É —Å–µ–∑–æ–Ω—É!")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏–Ω—Ç–æ–≤
async def add_points(update: Update, context):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    if len(context.args) != 2 or not context.args[0].isdigit() or not context.args[1].isdigit():
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <user_id> <points>.")

    user_id = int(context.args[0])
    points = int(context.args[1])

    if user_id in users_data:
        users_data[user_id]['points'] += points
        await update.message.reply_text(f"‚úÖ {points} –ø–æ–∏–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users_data[user_id]['name']}.")
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# Callback handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context):
    query = update.callback_query
    data = query.data

    if data == 'points':
        await my_points(update, context)
    elif data == 'leaders':
        await leaderboard(update, context)
    elif data == 'invite':
        await invite(update, context)
    elif data == 'daily_reward':
        await my_points(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    elif data == 'subscribe':
        await subscribe(update, context)  # –î–æ–±–∞–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token("7922474170:AAFLBMg9p1za9VSTeK5cc6BubEmpX_JcWGQ").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("greet_new_user", greet_new_user))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("add", add_points))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
