import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from datetime import datetime
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CHANNEL_ID = "XCrypto_Pulse"
ADMIN_ID = 962267965

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("bot_users.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    first_name TEXT,
    points INTEGER DEFAULT 0,
    last_claim TEXT,
    streak INTEGER DEFAULT 0,
    subscribed INTEGER DEFAULT 0
)''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def initialize_user(user_id, first_name):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)", (user_id, first_name))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def greet_new_user(update: Update, context):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name

    initialize_user(user_id, first_name)
    await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª! üéâ –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! üöÄ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (referrer_id,))
        referrer = cursor.fetchone()
        if referrer:
            new_points = referrer[2] + 100
            cursor.execute("UPDATE users SET points = ? WHERE user_id = ?", (new_points, referrer_id))
            conn.commit()
            await context.bot.send_message(chat_id=referrer_id, text="üéâ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –ø–æ–∏–Ω—Ç–æ–≤! üéâ")

    initialize_user(user_id, first_name)

    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–∏–Ω—Ç—ã", callback_data='points')],
        [InlineKeyboardButton("üèÜ –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤", callback_data='leaders')],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='invite')],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data='daily_reward')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! ü•≥\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? üëá", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏–Ω—Ç–æ–≤
async def my_points(update: Update, context):
    user = update.effective_user
    user_id = user.id

    cursor.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
    user_info = cursor.fetchone()

    if user_info:
        await update.callback_query.message.reply_text(f"üéâ –£ —Ç–µ–±—è {user_info[0]} –ø–æ–∏–Ω—Ç–æ–≤! üöÄ")
    else:
        await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
async def daily_reward(update: Update, context):
    user = update.effective_user
    user_id = user.id

    cursor.execute("SELECT points, last_claim, streak FROM users WHERE user_id = ?", (user_id,))
    user_info = cursor.fetchone()

    if user_info:
        today = datetime.now().date()
        last_claim_date = datetime.strptime(user_info[1], "%Y-%m-%d").date() if user_info[1] else None
        
        if last_claim_date == today:
            await update.callback_query.message.reply_text("üéÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π. üòâ")
        else:
            streak = min(user_info[2] + 1, 7)
            reward = [50, 70, 100, 120, 150, 180, 200][streak - 1]
            new_points = user_info[0] + reward
            
            cursor.execute("UPDATE users SET points = ?, last_claim = ?, streak = ? WHERE user_id = ?", 
                           (new_points, today, streak, user_id))
            conn.commit()

            await update.callback_query.message.reply_text(f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª {reward} –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∏–∑–∏—Ç! –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å {new_points} –ø–æ–∏–Ω—Ç–æ–≤! üöÄ")
    else:
        await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤
async def leaderboard(update: Update, context):
    user = update.effective_user
    initialize_user(user.id, user.first_name)

    cursor.execute("SELECT user_id, first_name, points FROM users ORDER BY points DESC LIMIT 10")
    top_users = cursor.fetchall()

    leaderboard_text = "üèÜ –¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤:\n"
    user_position = None

    for i, (user_id, first_name, points) in enumerate(top_users):
        leaderboard_text += f"{i + 1}. {first_name}: {points} –ø–æ–∏–Ω—Ç–æ–≤\n"
        if user_id == user.id:
            user_position = f"üë§ –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {i + 1}. {first_name}: {points} –ø–æ–∏–Ω—Ç–æ–≤"

    if user_position:
        leaderboard_text += f"\n{user_position}"

    await update.callback_query.message.reply_text(leaderboard_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
async def invite(update: Update, context):
    user = update.effective_user
    user_id = user.id

    initialize_user(user_id, user.first_name)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_link = f"https://t.me/{CHANNEL_ID}?start={user_id}"
    await update.callback_query.message.reply_text(f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ 100 –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ! –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link} üì≤")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID
async def admin(update: Update, context):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    cursor.execute("SELECT user_id, first_name, points FROM users")
    users_list = cursor.fetchall()
    user_list = "\n".join([f"{first_name} (ID: {user_id}): {points} –ø–æ–∏–Ω—Ç–æ–≤" for user_id, first_name, points in users_list])
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–æ–∏–Ω—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def reset(update: Update, context):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ—á–∫–∏ –∏ —Å—Ç—Ä–∏–∫–∏
    cursor.execute("UPDATE users SET points = 0, streak = 0, last_claim = NULL")
    conn.commit()

    await update.message.reply_text("üîÑ –í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞
    cursor.execute("SELECT user_id FROM users")
    users_list = cursor.fetchall()
    for user_id, in users_list:
        try:
            await context.bot.send_message(chat_id=user_id, text="üéâ –°–µ–∑–æ–Ω –æ–∫–æ–Ω—á–µ–Ω! –ó–∞–±–∏—Ä–∞–π —Å–≤–æ–∏ –ø—Ä–∏–∑—ã –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–æ–≤–æ–º—É —Å–µ–∑–æ–Ω—É!")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏–Ω—Ç–æ–≤
async def add_points(update: Update, context):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    if len(context.args) != 2 or not context.args[0].isdigit() or not context.args[1].isdigit():
        return await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <user_id> <points>")

    user_id = int(context.args[0])
    points_to_add = int(context.args[1])

    cursor.execute("UPDATE users SET points = points + ? WHERE user_id = ?", (points_to_add, user_id))
    conn.commit()

    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {points_to_add} –ø–æ–∏–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'points':
        await my_points(update, context)
    elif query.data == 'daily_reward':
        await daily_reward(update, context)
    elif query.data == 'leaders':
        await leaderboard(update, context)
    elif query.data == 'invite':
        await invite(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token("7626312484:AAHQBrzw6nu0F4_EZfe55LhtztaF5RP2Wds").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("add", add_points))
    application.add_handler(CommandHandler("greet", greet_new_user))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
